# @see http://commons.apache.org/proper/commons-dbcp/configuration.html

jdbc.url = jdbc:mysql://localhost:3306/test?useUnicode=true&characterEncoding=UTF-8&autoReconnect=true&zeroDateTimeBehavior=convertToNull&useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
jdbc.driverClassName=com.mysql.cj.jdbc.Driver
jdbc.username=root
jdbc.password=root

#dbcp
# The initial number of connections that are created when the pool is started.
jdbc.initialSize=10
# The maximum number of active connections that can be allocated from this pool at the same time, or negative for no limit.
jdbc.maxTotal=100
# The maximum number of connections that can remain idle in the pool, without extra ones being released, or negative for no limit.
# If maxIdle is set too low on heavily loaded systems it is possible you will see connections being closed and almost immediately new connections being opened.
# This is a result of the active threads momentarily closing connections faster than they are opening them, causing the number of idle connections to rise above maxIdle.
# The best value for maxIdle for heavily loaded system will vary but the default is a good starting point.
jdbc.maxIdle=50
# The minimum number of connections that can remain idle in the pool, without extra ones being created, or zero to create none.
jdbc.minIdle=0
# The maximum number of milliseconds that the pool will wait (when there are no available connections) for a connection to be returned before throwing an exception, or -1 to wait indefinitely.
jdbc.maxWaitMillis=true

# The SQL query that will be used to validate connections from this pool before returning them to the caller. If specified, this query MUST be an SQL SELECT statement that returns at least one row. If not specified, connections will be validation by calling the isValid() method.
jdbc.validationQuery=select 1
# The timeout in seconds before connection validation queries fail. If set to a positive value, this value is passed to the driver via the setQueryTimeout method of the Statement used to execute the validation query.
jdbc.validationQueryTimeout=5
# The indication of whether objects will be validated after creation. If the object fails to validate, the borrow attempt that triggered the object creation will fail.
jdbc.testOnCreate=false
# The indication of whether objects will be validated before being borrowed from the pool. If the object fails to validate, it will be dropped from the pool, and we will attempt to borrow another.
jdbc.testOnBorrow=true
# The indication of whether objects will be validated before being returned to the pool.
jdbc.testOnReturn=false
# The indication of whether objects will be validated by the idle object evictor (if any). If an object fails to validate, it will be dropped from the pool.
jdbc.testWhileIdle=true
